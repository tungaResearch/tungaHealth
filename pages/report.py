import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt

if "shared" not in st.session_state:
   st.session_state["shared"] = True

from pages.Utils.helper_code import load_data
data = load_data()  # data import: âœ…

# 1. Customer Satisfaction Score (CSS)
total_ = data['totalamount'].sum()

# 2. Renewal Rate
total_customers = len(data)
renewed_customers = data[data['recordstatus'] == 'autogenerated']['recordstatus'].count()
status_rate = (renewed_customers / total_customers) * 100

# 3. Average Time to Resolution
Total_Inventory_Value = data['totalamount'].count()


# # 4. Claims Ratio
# total_claims_made = data['ClaimsMade'].sum()
# total_premiums_collected = data['PremiumMonthly'].sum()
# claims_ratio = total_claims_made / total_premiums_collected

# # 5. Customer Churn Rate
#  = total_customers - renewed_customers
# customer_churn_rate = (churned_customers / total_customers) * 100


st.title("Tunga Health Inventory & FeedBack DashBoard ")

col1, col2 = st.columns(2, gap='small')
with col1:
    st.info("Inventory Value", icon="ðŸ“Œ")
    st.metric(label="Total", value=f"{total_:,.2f}")    
# with col2:
#     st.info("Claims Ratio", icon="ðŸ“Œ")
#     st.metric(label="ratio", value=f"{claims_ratio:,.2f}")    
# with col3:
#     st.info("Churn Rate", icon="ðŸ“Œ")
#     st.metric(label="ratio", value=f"{customer_churn_rate:,.2f}")
with col2:
    st.info("Inventory Items", icon="ðŸ“Œ")
    st.metric(label="Total", value=f"{Total_Inventory_Value}")    

          
st.markdown("""---""")
st.write("Improving operational efficiency can be achieved by identifying areas where processes can be streamlined, resources can be optimized, and decision-making can be made more data-driven. Let's ")

st.markdown("""---""")
tab1, tab2 = st.tabs(["Inventory", "FeedBack Reviews"])

with tab1:
    
    data['billdate'] = pd.to_datetime(data['billdate'])

    # Create a month column
    data['month'] = data['billdate'].dt.to_period('M').astype(str)


    # Aggregate the total purchase quantity by month
    monthly_purchases = data.groupby('month')['quantity'].sum().reset_index()

    # Generate the line plot for monthly purchases
    fig = px.line(monthly_purchases, x='month', y='quantity', title='Monthly Purchases',
                labels={'month': 'Month', 'quantity': 'Total Quantity'})
    fig.update_layout(xaxis_title='Month', yaxis_title='Total Quantity')

    # Display the plot in Streamlit
    st.plotly_chart(fig)


    # Group by year, month, and item name, then calculate total quantities
    monthly_item_purchases = data.groupby(['month', 'itemname'])['quantity'].sum().reset_index()

    # Streamlit page title
    st.title('Top Items Purchased Monthly')

    # Create dropdowns for selecting the year and month
    selected_month = st.selectbox('Select Month', sorted(data['month'].unique()))

    # Filter the data based on the selected year and month
    filtered_data = monthly_item_purchases[
        (monthly_item_purchases['month'] == selected_month)
    ]

    # Function to get the top items for the selected month and year
    def get_top_items(data, top_n=5):
        return data.nlargest(top_n, 'quantity')

    # Get the top items for the selected year and month
    top_items_filtered = get_top_items(filtered_data)

    # Sort the data by quantity (ascending order)
    top_items_filtered = top_items_filtered.sort_values(by='quantity')

    # Plotly Bar Chart
    fig = px.bar(top_items_filtered, 
                x='itemname', 
                y='quantity', 
                title=f'Top Items Purchased in {selected_month}',
                labels={'itemname': 'Item Name', 'quantity': 'Total Quantity'})

    # Update layout to show axis titles
    fig.update_layout(xaxis_title='Item Name', yaxis_title='Total Quantity', xaxis={'categoryorder':'total ascending'})

    # Show Plotly chart in Streamlit
    st.plotly_chart(fig)
    st.markdown("""---""")
  
  # Aggregate by category to get the total quantity
category_summary = data.groupby('Category').agg({'quantity': 'sum'}).reset_index()

# Display the category summary in Streamlit
st.write("Category Summary")
st.dataframe(category_summary)

# Filter out rows where 'Category' is 'Others'
filtered_category_summary = category_summary[category_summary['Category'] != 'Others']

# Sort the DataFrame by 'quantity' in ascending order
filtered_category_summary_sorted = filtered_category_summary.sort_values(by='quantity', ascending=False)

# Create a bar plot using Plotly Express
fig = px.bar(filtered_category_summary_sorted, x='Category', y='quantity',
             title='Total Quantity by Category',
             labels={'quantity': 'Total Quantity', 'Category': 'Category'},
             color_discrete_sequence=['#1f77b4'],  # Standard color (blue in this case)
             barmode='group')

# Adjust the width of the bars
fig.update_traces(width=0.8)  # Increase the width to make bars thicker

# Streamlit command to display the plot
st.plotly_chart(fig)